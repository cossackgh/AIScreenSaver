import { BackgroundImage } from '../types';

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
type RepositoryType = 'picsum' | 'unsplash' | 'local' | 'github' | 'custom';

export const imageService = {
  async getImagesFromRepository(repositoryUrl: string, count: number = 10): Promise<BackgroundImage[]> {
    console.log('üñºÔ∏è [ImageService] –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑:', repositoryUrl);
    console.log('üñºÔ∏è [ImageService] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', count);
    
    try {
      const repositoryType = this.detectRepositoryType(repositoryUrl);
      console.log('üñºÔ∏è [ImageService] –¢–∏–ø —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:', repositoryType);
      
      let images: BackgroundImage[] = [];
      
      switch (repositoryType) {
        case 'picsum':
          images = await this.getImagesFromPicsum(count);
          break;
        case 'unsplash':
          images = await this.getImagesFromUnsplash(repositoryUrl, count);
          break;
        case 'github':
          images = await this.getImagesFromGitHub(repositoryUrl, count);
          break;
        case 'local':
          images = await this.getImagesFromLocal(repositoryUrl, count);
          break;
        case 'custom':
          images = await this.getImagesFromCustomAPI(repositoryUrl, count);
          break;
        default:
          console.warn(`Unknown repository type for: ${repositoryUrl}`);
          images = await this.getImagesFromPicsum(count); // Fallback to Picsum
      }
      
      console.log('üñºÔ∏è [ImageService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', images.length);
      console.log('üñºÔ∏è [ImageService] –°–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', images.map(img => ({ url: img.url, filename: img.filename })));
      
      return images;
    } catch (error) {
      console.error('‚ùå [ImageService] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      const fallbackImages = await this.getImagesFromPicsum(count); // Fallback
      console.log('üñºÔ∏è [ImageService] –ò—Å–ø–æ–ª—å–∑—É–µ–º Picsum fallback, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', fallbackImages.length);
      return fallbackImages;
    }
  },

  detectRepositoryType(repositoryUrl: string): RepositoryType {
    const url = repositoryUrl.toLowerCase();
    
    if (url.includes('picsum.photos') || url === 'picsum' || url === 'https://picsum.photos') {
      return 'picsum';
    }
    if (url.includes('unsplash.com') || url.includes('unsplash')) {
      return 'unsplash';
    }
    if (url.includes('github.com') || url.includes('raw.githubusercontent.com')) {
      return 'github';
    }
    if (url.startsWith('file://') || url.startsWith('./') || url.startsWith('../') || url === 'local') {
      return 'local';
    }
    if (url.startsWith('http://') || url.startsWith('https://')) {
      return 'custom';
    }
    
    return 'picsum'; // Default fallback
  },

  async getImagesFromPicsum(count: number): Promise<BackgroundImage[]> {
    try {
      const images: BackgroundImage[] = [];
      
      for (let i = 0; i < count; i++) {
        const imageId = Math.floor(Math.random() * 1000) + 1;
        const url = `https://picsum.photos/1920/1080?random=${imageId}`;
        
        images.push({
          url,
          filename: `picsum_${imageId}.jpg`,
          loaded: false,
        });
      }
      
      return images;
    } catch (error) {
      console.error('Error fetching Picsum images:', error);
      return [];
    }
  },

  async getImagesFromUnsplash(repositoryUrl: string, count: number): Promise<BackgroundImage[]> {
    try {
      const images: BackgroundImage[] = [];
      
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Unsplash Source API
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Unsplash API —Å –∫–ª—é—á–æ–º
      const topics = ['nature', 'landscape', 'space', 'abstract', 'architecture'];
      
      for (let i = 0; i < count; i++) {
        const topic = topics[Math.floor(Math.random() * topics.length)];
        const url = `https://source.unsplash.com/1920x1080/?${topic}&sig=${Date.now() + i}`;
        
        images.push({
          url,
          filename: `unsplash_${topic}_${i}.jpg`,
          loaded: false,
        });
      }
      
      return images;
    } catch (error) {
      console.error('Error fetching Unsplash images:', error);
      return [];
    }
  },

  async getImagesFromGitHub(repositoryUrl: string, count: number): Promise<BackgroundImage[]> {
    console.log('üêô [GitHub] –û–±—Ä–∞–±–æ—Ç–∫–∞ GitHub URL:', repositoryUrl);
    
    try {
      let apiUrl: string;
      
      // –ü–∞—Ä—Å–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã GitHub URL
      if (repositoryUrl.includes('/tree/')) {
        // URL –≤–∏–¥–∞: https://github.com/user/repo/tree/commit/path
        const match = repositoryUrl.match(/github\.com\/([^/]+)\/([^/]+)\/tree\/([^/]+)\/(.+)/);
        if (match) {
          const [, owner, repo, ref, path] = match;
          apiUrl = `https://api.github.com/repos/${owner}/${repo}/contents/${path}?ref=${ref}`;
          console.log('üêô [GitHub] Parsed tree URL - Owner:', owner, 'Repo:', repo, 'Ref:', ref, 'Path:', path);
        } else {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GitHub URL —Å tree');
        }
      } else if (repositoryUrl.includes('/blob/')) {
        // URL –≤–∏–¥–∞: https://github.com/user/repo/blob/commit/path
        const match = repositoryUrl.match(/github\.com\/([^/]+)\/([^/]+)\/blob\/([^/]+)\/(.+)/);
        if (match) {
          const [, owner, repo, ref, path] = match;
          // –î–ª—è blob URL –±–µ—Ä–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
          const parentPath = path.split('/').slice(0, -1).join('/');
          apiUrl = `https://api.github.com/repos/${owner}/${repo}/contents/${parentPath}?ref=${ref}`;
          console.log('üêô [GitHub] Parsed blob URL - Owner:', owner, 'Repo:', repo, 'Ref:', ref, 'Parent Path:', parentPath);
        } else {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GitHub URL —Å blob');
        }
      } else {
        // –ü—Ä–æ—Å—Ç–æ–π URL –≤–∏–¥–∞: https://github.com/user/repo
        const match = repositoryUrl.match(/github\.com\/([^/]+)\/([^/]+)/);
        if (match) {
          const [, owner, repo] = match;
          apiUrl = `https://api.github.com/repos/${owner}/${repo}/contents`;
          console.log('üêô [GitHub] Parsed simple URL - Owner:', owner, 'Repo:', repo);
        } else {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GitHub URL');
        }
      }
      
      console.log('üêô [GitHub] API URL:', apiUrl);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
      const response = await fetch(apiUrl);
      console.log('üêô [GitHub] API Response Status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('üêô [GitHub] API Error Response:', errorText);
        throw new Error(`GitHub API error: ${response.status} - ${errorText}`);
      }
      
      const files = await response.json();
      console.log('üêô [GitHub] Files received:', files.length);
      console.log('üêô [GitHub] File types:', files.map((f: any) => ({ name: f.name, type: f.type })));
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageFiles = files.filter((file: any) => {
        const isFile = file.type === 'file';
        const isImage = /\.(jpg|jpeg|png|gif|webp)$/i.test(file.name);
        console.log(`üêô [GitHub] File ${file.name}: type=${file.type}, isImage=${isImage}`);
        return isFile && isImage;
      });
      
      console.log('üêô [GitHub] Image files found:', imageFiles.length);
      console.log('üêô [GitHub] Image files:', imageFiles.map((f: any) => f.name));
      
      if (imageFiles.length === 0) {
        console.warn('üêô [GitHub] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ');
        return [];
      }
      
      // –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
      const selectedFiles = imageFiles
        .sort(() => 0.5 - Math.random())
        .slice(0, Math.min(count, imageFiles.length));
      
      console.log('üêô [GitHub] Selected files:', selectedFiles.map((f: any) => f.name));
      
      const images: BackgroundImage[] = [];
      for (const file of selectedFiles) {
        console.log('üêô [GitHub] Processing file:', file.name, 'download_url:', file.download_url);
        images.push({
          url: file.download_url,
          filename: file.name,
          loaded: false,
        });
      }
      
      console.log('üêô [GitHub] Final images:', images.length);
      return images;
    } catch (error) {
      console.error('‚ùå [GitHub] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ GitHub –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      return [];
    }
  },

  async getImagesFromLocal(repositoryUrl: string, count: number): Promise<BackgroundImage[]> {
    try {
      // –î–ª—è React Native –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏
      // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ assets/images/backgrounds/
      const localImages: any[] = [
        // –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ assets/images/backgrounds/
        // require('../assets/images/backgrounds/bg1.jpg'),
        // require('../assets/images/backgrounds/bg2.jpg'),
        // require('../assets/images/backgrounds/bg3.jpg'),
      ];
      
      if (localImages.length === 0) {
        console.warn('No local images found, falling back to Picsum');
        return this.getImagesFromPicsum(count);
      }
      
      const images: BackgroundImage[] = [];
      const selectedImages = localImages
        .sort(() => 0.5 - Math.random())
        .slice(0, Math.min(count, localImages.length));
      
      selectedImages.forEach((imageSource, index) => {
        images.push({
          url: imageSource,
          filename: `local_image_${index + 1}.jpg`,
          loaded: false,
        });
      });
      
      return images;
    } catch (error) {
      console.error('Error loading local images:', error);
      // Fallback –∫ Picsum –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
      return this.getImagesFromPicsum(count);
    }
  },

  async getImagesFromCustomAPI(repositoryUrl: string, count: number): Promise<BackgroundImage[]> {
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å custom API
      const response = await fetch(`${repositoryUrl}?count=${count}`);
      if (!response.ok) {
        throw new Error(`Custom API error: ${response.status}`);
      }
      
      const data = await response.json();
      
      // –û–∂–∏–¥–∞–µ–º, —á—Ç–æ API –≤–µ—Ä–Ω–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª–µ–º 'url' –∏–ª–∏ 'image'
      if (Array.isArray(data)) {
        return data.map((item, index) => ({
          url: item.url || item.image || item.src,
          filename: item.filename || item.name || `custom_${index + 1}.jpg`,
          loaded: false,
        }));
      }
      
      // –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –º–∞—Å—Å–∏–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (data.images && Array.isArray(data.images)) {
        return data.images.map((item: any, index: number) => ({
          url: item.url || item.image || item.src,
          filename: item.filename || item.name || `custom_${index + 1}.jpg`,
          loaded: false,
        }));
      }
      
      throw new Error('Invalid API response format');
    } catch (error) {
      console.error('Error fetching custom API images:', error);
      return [];
    }
  },

  async preloadImage(url: string): Promise<boolean> {
    return new Promise((resolve) => {
      const image = new Image();
      image.onload = () => resolve(true);
      image.onerror = () => resolve(false);
      image.src = url;
    });
  },

  async preloadImages(images: BackgroundImage[]): Promise<BackgroundImage[]> {
    const loadPromises = images.map(async (image) => {
      const loaded = await this.preloadImage(image.url);
      return { ...image, loaded };
    });

    return Promise.all(loadPromises);
  },
};
