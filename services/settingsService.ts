import AsyncStorage from '@react-native-async-storage/async-storage';
import { Settings } from '../types';
import { getSystemLanguage, getSystemTemperatureUnit } from '../utils/localization';

const SETTINGS_KEY = 'screensaver_settings';

// –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å —É—á–µ—Ç–æ–º —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
function createDefaultSettings(): Settings {
  return {
    timeFormat: '24h',
    showSeconds: true,
    showDate: true,
    dateFormat: 'DD/MM/YYYY',
    language: getSystemLanguage(), // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Å–æ–≤
    clockFontSize: 300, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ —á–∞—Å–æ–≤
    clockColor: '#ffffff', // –ë–µ–ª—ã–π —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    clockOpacity: 0.6, // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    dateFontSize: 44, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–∞—Ç—ã
    
    weatherEnabled: true,
    weatherLocation: 'auto',
    weatherApiKey: '', // –ü—É—Å—Ç–æ–π API –∫–ª—é—á –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    weatherCities: ['auto'], // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    currentCityIndex: 0, // –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞ (auto)
    showForecast: true,
    forecastDays: 5,
    temperatureUnit: getSystemTemperatureUnit(), // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–¥–∏–Ω–∏—Ü —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    imageRepository: 'picsum',
    imageTransitionEffect: 'fade',
    imageChangeInterval: 5,
    imageDisplayOrder: 'sequential',
    keepScreenOn: true,
  };
}

export const defaultSettings: Settings = createDefaultSettings();

export const settingsService = {
  async getSettings(): Promise<Settings> {
    try {
      const settings = await AsyncStorage.getItem(SETTINGS_KEY);
      if (settings) {
        return { ...defaultSettings, ...JSON.parse(settings) };
      }
      return defaultSettings;
    } catch (error) {
      console.error('Error loading settings:', error);
      return defaultSettings;
    }
  },

  async saveSettings(settings: Partial<Settings>): Promise<void> {
    try {
      console.log('üíæ [settingsService] –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', settings);
      const currentSettings = await this.getSettings();
      const newSettings = { ...currentSettings, ...settings };
      console.log('üíæ [settingsService] –§–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', newSettings);
      await AsyncStorage.setItem(SETTINGS_KEY, JSON.stringify(newSettings));
      console.log('‚úÖ [settingsService] –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ AsyncStorage');
    } catch (error) {
      console.error('‚ùå [settingsService] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  },

  async resetSettings(): Promise<void> {
    try {
      await AsyncStorage.removeItem(SETTINGS_KEY);
    } catch (error) {
      console.error('Error resetting settings:', error);
    }
  },
};
